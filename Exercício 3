# inclui  < iostream >
# inclui  < string >
# incluir  < ctime >
# inclui  < vetor >
usando  namespace  std ;

# define  TAM  10

classe  Data
{
privado:
	int dia;
	int mes;
	int ano;
público:
	Dados ( int dia, int mes, int ano)
	{
		este -> dia = dia;
		this -> mes = mes;
		este -> ano = ano;
	}
	Dados ()
	{
		time_t t;
		struct  tm * data;
		
		tempo (& t);
		dados = hora local (& t);
		
		this -> dia = data-> tm_mday ;
		this -> mes = data-> tm_mon + 1 ;
		este -> ano = (dados-> tm_ano + 1900 );
	}
	void  setDia ( int dia)
	{
		este -> dia = dia;
	}
	void  setMes ( int mes)
	{
		this -> mes = mes;
	}
	void  setAno ( int ano)
	{
		este -> ano = ano;
	}
	int  getDia ()
	{
		return  this -> dia ;
	}
	int  getMes ()
	{
		retornar  isso -> mes ;
	}
	int  getAno ()
	{
		retornar  este -> ano ;
	}
	string getData ()
	{
		string dia = ( this -> dia < 10 )? " 0 " + to_string ( this -> dia ): to_string ( this -> dia );
		string mes = ( this -> mes < 10 )? " 0 " + to_string ( this -> mes ): to_string ( this -> mes );
		string ano = to_string ( this -> ano );				
		
		retornar dia + " / " + mes + " / " + ano;
	}
	Dados * dia_seguinte ()
	{
		int diasNoMes [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 };
		Dados * d1 = novos  Dados ( este -> dia , este -> mes , este -> ano );

		if (d1-> ano % 4 == 0 )
		{
			diasNoMes [ 1 ] ++;
		}

		d1-> dia ++;
		if (d1-> dia > diasNoMes [d1-> mes - 1 ])
		{
			d1-> dia = 1 ;
			if (++ d1-> mes > 12 )
			{
				d1-> mes = 1 ;
				d1-> ano ++;
			}
		}

		return d1;
	}
};

classe  Contato
{
	privado:
		string email;
		nome da string;
		string telefone;
		string dtnasc;
		
	público:
		// construtor
		Contato (string email, string nome, string telefone, string dtnasc)
		{
			this -> email = email;
			this -> nome = nome;
			este -> telefone = telefone;
			this -> dtnasc = dtnasc;
		}		
		Contato ()
		{
			this -> email = " " ;
			this -> nome = " " ;
			este -> telefone = " " ;
			this -> dtnasc = " " ;
		}
		
		// setters
		void  setEmail (string email)
		{
			this -> email = email;
		}
		void  setNome (nome da string)
		{
			this -> nome = nome;
		}
		void  setTelefone (telefone string)
		{
			este -> telefone = telefone;
		}
		void  setDtnasc (string dtnasc)
		{
			this -> dtnasc = dtnasc;
		}
		
		// getters
		string getEmail ()
		{
			retornar  este -> email ;
		}
		string getNome ()
		{
			retorna  este -> nome ;
		}
		string getTelefone ()
		{
			devolver  este -> telefone ;
		}
		string getDtnasc ()
		{
			retornar  isso -> dtnasc ;
		}
		
		int  getIdade ()
		{
			Dados * dtHoje = novos  dados ( 6 , 9 , 2020 );
			int anoAtual = dtHoje-> getAno ();
			int anoNasc = stoi (( este -> dtnasc ). substr ( 6 , 4 )); // extraindo ano
			int mesNasc = stoi (( this -> dtnasc ). substr ( 3 , 2 )); // extraindo mês
			int diaNasc = stoi (( este -> dtnasc ). substr ( 0 , 2 )); // extraindo dia
			
			int idade = anoAtual - anoNasc;			
			if (dtHoje-> getMes () <mesNasc) {
				idade--;
			} else  if (dtHoje-> getMes () == mesNasc) {
				if (dtHoje-> getDia () <diaNasc) {
					idade--;
				}
			}
			
			voltar idade;
		}
};


// Funções
// resumo dos contatos e suas únicas idades
void  resumoContatos (Contato * contatos [])
{
	para ( int i = 0 ; i <TAM; i ++)
	{
		string nome = contatos [i] -> getNome ();
		string dtNasc = contatos [i] -> getDtnasc ();
		string idade = to_string (contatos [i] -> getIdade ());
		cout << nome << " ---> \ t " << " DN: " << dtNasc << " - " << idade << " anos " << endl;
	}
}

// cálculo da média de idade dos contatos
int  calcMedia (Contato * contatos [])
{
	int contIdade = 0 ;
	// somando idade dos contatos
	para ( int i = 0 ; i <TAM; i ++)
	{
		contIdade + = contatos [i] -> getIdade ();
	}
	
	retorno contIdade / TAM;
}

// retornando matriz com contatos com idade acima da média
vetor <string> getAcimaMedia (Contato * contatos [])
{
	vetor <string> acimaMedia;	
	para ( int i = 0 ; i <TAM; i ++)
	{
		if (contatos [i] -> getIdade ()> calcMedia (contatos))
		{
			acimaMedia. push_back (contatos [i] -> getNome ());
		}
	}
	
	return acimaMedia;	
}

// retorna quantidade de contatos maiores de idade
int  getQuantMaior18 (Contato * contatos [])
{
	int quantMaior18 = 0 ;
	para ( int i = 0 ; i <TAM; i ++)
	{
		if (contatos [i] -> getIdade ()> = 18 )
		{
			quantMaior18 ++;
		}
	}
	
	return quantMaior18;
}

// retorna um array de strings com os nomes dos contatos mais velhos.
vetor <string> getMaisVelho (Contato * contatos [])
{
	vetor <string> contatoMaior;
	
	int maior = 0 ;
	para ( int i = 0 ; i <TAM; i ++)
	{
		if (i == 0 )
		{
			maior = contatos [i] -> getIdade ();
			contatoMaior. push_back (contatos [i] -> getNome ());
		} else {
			if (maior <contatos [i] -> getIdade ())
			{
				maior = contatos [i] -> getIdade ();
				contatoMaior = {};
				contatoMaior. push_back (contatos [i] -> getNome ());
			} else  if (maior == contatos [i] -> getIdade ())
			{
				contatoMaior. push_back (contatos [i] -> getNome ());
			}
		}
	}
	
	contatoMaior. push_back ( to_string (maior)); // adicionando idade mais velha no final do array
	retornar contatoMaior;
}

int  main ( int argc, char ** argv)
{
	setlocale (LC_ALL, " " );
	
	Contato * contatos [TAM];
	/ * contatos [0] = new Contato ("grazi.ribeiro@hotmail.com", "Grazielle Ribeiro", "(13) 97444-6666", "31/03/2001");
	contatos [1] = novo Contato ("graciela@gmail.com", "Graciela Rossi", "(13) 97784-9678", "19/01/2003");
	contatos [2] = novo Contato ("rangel@hotmail.com", "Rangel Castilho", "(13) 97510-6260", "13/02/1985");
	contatos [3] = novo Contato ("eliza@gmail.com", "Eliza Salazar", "(13) 97403-8924", "09/08/1980");
	contatos [4] = novo Contato ("evelyn@hotmail.com", "Evelyn Cristina", "(13) 98867-1930", "15/04/1997"); * /
	// Contato * contatos [3];
	
	string nome, email, telefone, dtNasc;
	para ( int i = 0 ; i <TAM; i ++)
	{
		cout << " CONTATO " << i + 1 << endl;
		cout << " --------------------------- " << endl;
		
		cout << " Nome: " ;
		cin >> nome;
		
		cout << " E-mail: " ;
		cin >> email;
		
		cout << " Telefone: " ;
		cin >> telefone;
		
		cout << " Data Nasc. (dd / mm / aaaa): " ;
		cin >> dtNasc;
		
		contatos [i] = novo  Contato (email, nome, telefone, dtNasc);
		cout << endl;
	}
	
	// EXIBIÇÕES
	// resumo dos contatos e suas idades
	resumoContatos (contatos);
	
	// contatos maiores de idade
	cout << endl << " MÉDIA DAS IDADES: " << calcMedia (contatos) << " anos " << endl;
	cout << endl << " CONTATOS MAIORES DE IDADE: " << getQuantMaior18 (contatos) << " CONTATOS " << endl;
	
	// contatos acima da idade geral de idade
	vetor <string> nomesAcimaMedia = getAcimaMedia (contatos);
	cout << endl << " CONTATOS ACIMA DA MÉDIA DE IDADE ( " << calcMedia (contatos) << " ANOS): " << endl;
	para ( int i = 0 ; i <nomesAcimaMedia. size (); i ++)
	{
		cout << nomesAcimaMedia [i] << endl;
	}
	
	// contatos mais velhos de idade
	vetor <string> nomesMaisVelhos = getMaisVelho (contatos);
	cout << endl << " CONTATOS MAIS VELHOS ( " << nomesMaisVelhos [nomesMaisVelhos. size () - 1 ] << " ANOS): " << endl;
	para ( int i = 0 ; i <nomesMaisVelhos. tamanho () - 1 ; i ++)
	{
		cout << i + 1 << " - " << nomesMaisVelhos [i] << endl;
	}

	return  0 ;
}
